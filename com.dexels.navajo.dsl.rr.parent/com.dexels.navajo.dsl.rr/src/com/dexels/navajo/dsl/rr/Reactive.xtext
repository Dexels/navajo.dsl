grammar com.dexels.navajo.dsl.rr.Reactive hidden(WS)

generate reactive "http://www.dexels.com/navajo/dsl/rr/Reactive"
import "http://www.dexels.com/expression/1.0"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Model:
	expressions+=OrExpression*;


terminal NOT: '!';
terminal NUMBER returns ecore::EBigDecimal:
  ('0'..'9')+ (DOT ('0'..'9')+)?;
terminal WS			: (' '|'\t'|'\r'|'\n')+;
terminal TRUE: 'true' | 'TRUE';
terminal FALSE: 'false' | 'FALSE';
terminal NULL: 'null' | 'NULL';
terminal TODAY: 'today' | 'TODAY';
terminal FORALL: 'FORALL';
terminal PARENT: "..";
	
terminal AT: '@';	

terminal LITERALSTRING returns ecore::EString: 
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	;
	
terminal COLON:
	':';

terminal SQBRACKET_OPEN:
	'[';
	
terminal SQBRACKET_CLOSE:
	']';

terminal TML_SEPARATOR:
	'/';

terminal TML_EXISTS:
	'?';
	
terminal DOLLAR:
	'$';
	
terminal BRACKET_OPEN:
	'('
;

terminal BRACKET_CLOSE:
	')'
;
terminal HEADER:
	'=>'
;
terminal EQUALS:
	'='
;
terminal COMMA:
	','
;
terminal AND:
	'AND'
;
terminal OR:
	'OR'
;
terminal HASH:
	'#'
;
terminal CURLYOPEN:
	'{'
;
terminal CURLYCLOSE:
	'}'
;
terminal EQUALSEQUALS:
	'=='
;
terminal NEQUALS:
	'!='
;
terminal PLUS:
	'+'
;
terminal PIPE:
	'->'
;
terminal MINUS:
	'-'
;
terminal MULTIPLY:
	'*'
;
terminal LTEQ:
	'<='
;
terminal GTEQ:
	'>='
;
terminal LT:
	'<'
;
terminal GT:
	'>'
;
terminal DOT:
	'.'
;
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;


PathElement returns ecore::EString:
	(ID|DOT|PARENT|TML_SEPARATOR)
;

TmlExpression returns TmlReference:
	SQBRACKET_OPEN (absolute?=TML_SEPARATOR)? (param?=AT)? elements+=PathElement (TML_SEPARATOR elements+=PathElement)* SQBRACKET_CLOSE
;
ExistsTmlExpression returns ExistsTmlReference: 
	TML_EXISTS SQBRACKET_OPEN (absolute?=TML_SEPARATOR)? (param?=AT)? elements+=PathElement (TML_SEPARATOR elements+=PathElement)* SQBRACKET_CLOSE
;
OrExpression returns Expression:
    parameters+=AndExpression ({OrExpression.left=current} operations+= OR parameters+=AndExpression )*
;    
AndExpression returns Expression:
     parameters+=EqualityExpression (operations+= AND parameters+=EqualityExpression )*
;  
EqualityExpression returns Expression: 
     parameters+=RelationalExpression ((operations+= EQUALSEQUALS parameters+=RelationalExpression) | (operations+=NEQUALS parameters+=RelationalExpression))?
;     
// Skipped for now. Trouble with overloaded '<' stuff  
RelationalExpression returns Expression: 
   {Expression} parameters+=AdditiveExpression ((operations+=LT parameters+=AdditiveExpression)|(operations+=GT parameters+=AdditiveExpression)|(operations+=LTEQ parameters+=AdditiveExpression)|(operations+=GTEQ parameters+=AdditiveExpression))?
    ;
    
AdditiveExpression returns Expression:
      parameters+=MultiplicativeExpression (
      	(PLUS parameters+=MultiplicativeExpression ) 
      )*
	;
	
MultiplicativeExpression returns Expression: 
      parameters+=UnaryExpression ((operations+=MULTIPLY parameters+=UnaryExpression ) |  (operations+=TML_SEPARATOR parameters+=UnaryExpression ))*
	;
	
UnaryExpression returns Expression:
	(
		NOT parameters+=PrimaryExpression 
		| MINUS parameters+=PrimaryExpression
	)
	| PrimaryExpression;	

PrimaryExpression returns Expression:
   	parameters+=Literal
	| BRACKET_OPEN parameters+=OrExpression BRACKET_CLOSE
;	

// Keep this one in place so it will create a node for the code completion
FunctionName:
	ID;

FunctionCall returns FunctionCall:
	name=FunctionName BRACKET_OPEN (parameters+=OrExpression)? (COMMA parameters+=OrExpression)*  BRACKET_CLOSE
;

DateLiteral returns Expression:
{Expression}
	NUMBER HASH NUMBER HASH NUMBER HASH NUMBER HASH NUMBER HASH NUMBER
;

Literal returns Expression:
  {Expression}NUMBER
  | valueString= LITERALSTRING
  | operations+=FORALL BRACKET_OPEN valueString=LITERALSTRING COMMA parameters+=OrExpression BRACKET_CLOSE
  | parameters+=FunctionCall
  | expressionType=CURLYOPEN (parameters+=OrExpression)?  (COMMA parameters+=OrExpression)* CURLYCLOSE
  | elements+=NULL
  | elements+=TODAY 
  | elements+=TRUE
  | elements+=FALSE
  | parameters+=TmlExpression
  | parameters+=ExistsTmlExpression
  | parameters+=DateLiteral
  ;


